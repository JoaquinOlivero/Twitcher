// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: main.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Main_CreateSongPlaylist_FullMethodName         = "/service.Main/CreateSongPlaylist"
	Main_CurrentSongPlaylist_FullMethodName        = "/service.Main/CurrentSongPlaylist"
	Main_UpdateSongPlaylist_FullMethodName         = "/service.Main/UpdateSongPlaylist"
	Main_Preview_FullMethodName                    = "/service.Main/Preview"
	Main_StartStream_FullMethodName                = "/service.Main/StartStream"
	Main_StopStream_FullMethodName                 = "/service.Main/StopStream"
	Main_StartAudio_FullMethodName                 = "/service.Main/StartAudio"
	Main_StartOutput_FullMethodName                = "/service.Main/StartOutput"
	Main_StopOutput_FullMethodName                 = "/service.Main/StopOutput"
	Main_Status_FullMethodName                     = "/service.Main/Status"
	Main_FindNewSongsNCS_FullMethodName            = "/service.Main/FindNewSongsNCS"
	Main_StatusNCS_FullMethodName                  = "/service.Main/StatusNCS"
	Main_TwitchSaveStreamKey_FullMethodName        = "/service.Main/TwitchSaveStreamKey"
	Main_CheckTwitchStreamKey_FullMethodName       = "/service.Main/CheckTwitchStreamKey"
	Main_DeleteTwitchStreamKey_FullMethodName      = "/service.Main/DeleteTwitchStreamKey"
	Main_SaveTwitchDevCredentials_FullMethodName   = "/service.Main/SaveTwitchDevCredentials"
	Main_CheckTwitchDevCredentials_FullMethodName  = "/service.Main/CheckTwitchDevCredentials"
	Main_DeleteTwitchDevCredentials_FullMethodName = "/service.Main/DeleteTwitchDevCredentials"
	Main_TwitchAccessToken_FullMethodName          = "/service.Main/TwitchAccessToken"
)

// MainClient is the client API for Main service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainClient interface {
	CreateSongPlaylist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	CurrentSongPlaylist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	UpdateSongPlaylist(ctx context.Context, in *SongPlaylist, opts ...grpc.CallOption) (*empty.Empty, error)
	Preview(ctx context.Context, in *SDP, opts ...grpc.CallOption) (*SDP, error)
	StartStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StopStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StartAudio(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AudioResponse, error)
	StartOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error)
	StopOutput(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	FindNewSongsNCS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	StatusNCS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusNCSResponse, error)
	TwitchSaveStreamKey(ctx context.Context, in *TwitchStreamKey, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckTwitchStreamKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TwitchStreamKey, error)
	DeleteTwitchStreamKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveTwitchDevCredentials(ctx context.Context, in *DevCredentials, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckTwitchDevCredentials(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DevCredentials, error)
	DeleteTwitchDevCredentials(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	TwitchAccessToken(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mainClient struct {
	cc grpc.ClientConnInterface
}

func NewMainClient(cc grpc.ClientConnInterface) MainClient {
	return &mainClient{cc}
}

func (c *mainClient) CreateSongPlaylist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, Main_CreateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) CurrentSongPlaylist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, Main_CurrentSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) UpdateSongPlaylist(ctx context.Context, in *SongPlaylist, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_UpdateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) Preview(ctx context.Context, in *SDP, opts ...grpc.CallOption) (*SDP, error) {
	out := new(SDP)
	err := c.cc.Invoke(ctx, Main_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) StartStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_StartStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) StopStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_StopStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) StartAudio(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AudioResponse, error) {
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, Main_StartAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) StartOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, Main_StartOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) StopOutput(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_StopOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Main_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) FindNewSongsNCS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_FindNewSongsNCS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) StatusNCS(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusNCSResponse, error) {
	out := new(StatusNCSResponse)
	err := c.cc.Invoke(ctx, Main_StatusNCS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) TwitchSaveStreamKey(ctx context.Context, in *TwitchStreamKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_TwitchSaveStreamKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) CheckTwitchStreamKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TwitchStreamKey, error) {
	out := new(TwitchStreamKey)
	err := c.cc.Invoke(ctx, Main_CheckTwitchStreamKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) DeleteTwitchStreamKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_DeleteTwitchStreamKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) SaveTwitchDevCredentials(ctx context.Context, in *DevCredentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_SaveTwitchDevCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) CheckTwitchDevCredentials(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DevCredentials, error) {
	out := new(DevCredentials)
	err := c.cc.Invoke(ctx, Main_CheckTwitchDevCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) DeleteTwitchDevCredentials(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_DeleteTwitchDevCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) TwitchAccessToken(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Main_TwitchAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServer is the server API for Main service.
// All implementations must embed UnimplementedMainServer
// for forward compatibility
type MainServer interface {
	CreateSongPlaylist(context.Context, *empty.Empty) (*SongPlaylist, error)
	CurrentSongPlaylist(context.Context, *empty.Empty) (*SongPlaylist, error)
	UpdateSongPlaylist(context.Context, *SongPlaylist) (*empty.Empty, error)
	Preview(context.Context, *SDP) (*SDP, error)
	StartStream(context.Context, *empty.Empty) (*empty.Empty, error)
	StopStream(context.Context, *empty.Empty) (*empty.Empty, error)
	StartAudio(context.Context, *empty.Empty) (*AudioResponse, error)
	StartOutput(context.Context, *OutputRequest) (*OutputResponse, error)
	StopOutput(context.Context, *empty.Empty) (*empty.Empty, error)
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	FindNewSongsNCS(context.Context, *empty.Empty) (*empty.Empty, error)
	StatusNCS(context.Context, *empty.Empty) (*StatusNCSResponse, error)
	TwitchSaveStreamKey(context.Context, *TwitchStreamKey) (*empty.Empty, error)
	CheckTwitchStreamKey(context.Context, *empty.Empty) (*TwitchStreamKey, error)
	DeleteTwitchStreamKey(context.Context, *empty.Empty) (*empty.Empty, error)
	SaveTwitchDevCredentials(context.Context, *DevCredentials) (*empty.Empty, error)
	CheckTwitchDevCredentials(context.Context, *empty.Empty) (*DevCredentials, error)
	DeleteTwitchDevCredentials(context.Context, *empty.Empty) (*empty.Empty, error)
	TwitchAccessToken(context.Context, *UserAuth) (*empty.Empty, error)
	mustEmbedUnimplementedMainServer()
}

// UnimplementedMainServer must be embedded to have forward compatible implementations.
type UnimplementedMainServer struct {
}

func (UnimplementedMainServer) CreateSongPlaylist(context.Context, *empty.Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSongPlaylist not implemented")
}
func (UnimplementedMainServer) CurrentSongPlaylist(context.Context, *empty.Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSongPlaylist not implemented")
}
func (UnimplementedMainServer) UpdateSongPlaylist(context.Context, *SongPlaylist) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSongPlaylist not implemented")
}
func (UnimplementedMainServer) Preview(context.Context, *SDP) (*SDP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedMainServer) StartStream(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedMainServer) StopStream(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedMainServer) StartAudio(context.Context, *empty.Empty) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAudio not implemented")
}
func (UnimplementedMainServer) StartOutput(context.Context, *OutputRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOutput not implemented")
}
func (UnimplementedMainServer) StopOutput(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOutput not implemented")
}
func (UnimplementedMainServer) Status(context.Context, *empty.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedMainServer) FindNewSongsNCS(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNewSongsNCS not implemented")
}
func (UnimplementedMainServer) StatusNCS(context.Context, *empty.Empty) (*StatusNCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusNCS not implemented")
}
func (UnimplementedMainServer) TwitchSaveStreamKey(context.Context, *TwitchStreamKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchSaveStreamKey not implemented")
}
func (UnimplementedMainServer) CheckTwitchStreamKey(context.Context, *empty.Empty) (*TwitchStreamKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTwitchStreamKey not implemented")
}
func (UnimplementedMainServer) DeleteTwitchStreamKey(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTwitchStreamKey not implemented")
}
func (UnimplementedMainServer) SaveTwitchDevCredentials(context.Context, *DevCredentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTwitchDevCredentials not implemented")
}
func (UnimplementedMainServer) CheckTwitchDevCredentials(context.Context, *empty.Empty) (*DevCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTwitchDevCredentials not implemented")
}
func (UnimplementedMainServer) DeleteTwitchDevCredentials(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTwitchDevCredentials not implemented")
}
func (UnimplementedMainServer) TwitchAccessToken(context.Context, *UserAuth) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchAccessToken not implemented")
}
func (UnimplementedMainServer) mustEmbedUnimplementedMainServer() {}

// UnsafeMainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServer will
// result in compilation errors.
type UnsafeMainServer interface {
	mustEmbedUnimplementedMainServer()
}

func RegisterMainServer(s grpc.ServiceRegistrar, srv MainServer) {
	s.RegisterService(&Main_ServiceDesc, srv)
}

func _Main_CreateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).CreateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_CreateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).CreateSongPlaylist(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_CurrentSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).CurrentSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_CurrentSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).CurrentSongPlaylist(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_UpdateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongPlaylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).UpdateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_UpdateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).UpdateSongPlaylist(ctx, req.(*SongPlaylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).Preview(ctx, req.(*SDP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).StartStream(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_StopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).StopStream(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_StartAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).StartAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_StartAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).StartAudio(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_StartOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).StartOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_StartOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).StartOutput(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_StopOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).StopOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_StopOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).StopOutput(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_FindNewSongsNCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).FindNewSongsNCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_FindNewSongsNCS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).FindNewSongsNCS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_StatusNCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).StatusNCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_StatusNCS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).StatusNCS(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_TwitchSaveStreamKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchStreamKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).TwitchSaveStreamKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_TwitchSaveStreamKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).TwitchSaveStreamKey(ctx, req.(*TwitchStreamKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_CheckTwitchStreamKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).CheckTwitchStreamKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_CheckTwitchStreamKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).CheckTwitchStreamKey(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_DeleteTwitchStreamKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).DeleteTwitchStreamKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_DeleteTwitchStreamKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).DeleteTwitchStreamKey(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_SaveTwitchDevCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).SaveTwitchDevCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_SaveTwitchDevCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).SaveTwitchDevCredentials(ctx, req.(*DevCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_CheckTwitchDevCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).CheckTwitchDevCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_CheckTwitchDevCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).CheckTwitchDevCredentials(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_DeleteTwitchDevCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).DeleteTwitchDevCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_DeleteTwitchDevCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).DeleteTwitchDevCredentials(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_TwitchAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).TwitchAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Main_TwitchAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).TwitchAccessToken(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// Main_ServiceDesc is the grpc.ServiceDesc for Main service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Main_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Main",
	HandlerType: (*MainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSongPlaylist",
			Handler:    _Main_CreateSongPlaylist_Handler,
		},
		{
			MethodName: "CurrentSongPlaylist",
			Handler:    _Main_CurrentSongPlaylist_Handler,
		},
		{
			MethodName: "UpdateSongPlaylist",
			Handler:    _Main_UpdateSongPlaylist_Handler,
		},
		{
			MethodName: "Preview",
			Handler:    _Main_Preview_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _Main_StartStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _Main_StopStream_Handler,
		},
		{
			MethodName: "StartAudio",
			Handler:    _Main_StartAudio_Handler,
		},
		{
			MethodName: "StartOutput",
			Handler:    _Main_StartOutput_Handler,
		},
		{
			MethodName: "StopOutput",
			Handler:    _Main_StopOutput_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Main_Status_Handler,
		},
		{
			MethodName: "FindNewSongsNCS",
			Handler:    _Main_FindNewSongsNCS_Handler,
		},
		{
			MethodName: "StatusNCS",
			Handler:    _Main_StatusNCS_Handler,
		},
		{
			MethodName: "TwitchSaveStreamKey",
			Handler:    _Main_TwitchSaveStreamKey_Handler,
		},
		{
			MethodName: "CheckTwitchStreamKey",
			Handler:    _Main_CheckTwitchStreamKey_Handler,
		},
		{
			MethodName: "DeleteTwitchStreamKey",
			Handler:    _Main_DeleteTwitchStreamKey_Handler,
		},
		{
			MethodName: "SaveTwitchDevCredentials",
			Handler:    _Main_SaveTwitchDevCredentials_Handler,
		},
		{
			MethodName: "CheckTwitchDevCredentials",
			Handler:    _Main_CheckTwitchDevCredentials_Handler,
		},
		{
			MethodName: "DeleteTwitchDevCredentials",
			Handler:    _Main_DeleteTwitchDevCredentials_Handler,
		},
		{
			MethodName: "TwitchAccessToken",
			Handler:    _Main_TwitchAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
