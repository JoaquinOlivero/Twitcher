// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/songs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamManagement_CreateSongPlaylist_FullMethodName  = "/service.StreamManagement/CreateSongPlaylist"
	StreamManagement_CurrentSongPlaylist_FullMethodName = "/service.StreamManagement/CurrentSongPlaylist"
	StreamManagement_UpdateSongPlaylist_FullMethodName  = "/service.StreamManagement/UpdateSongPlaylist"
	StreamManagement_Preview_FullMethodName             = "/service.StreamManagement/Preview"
	StreamManagement_StartStream_FullMethodName         = "/service.StreamManagement/StartStream"
	StreamManagement_StopStream_FullMethodName          = "/service.StreamManagement/StopStream"
	StreamManagement_StartAudio_FullMethodName          = "/service.StreamManagement/StartAudio"
	StreamManagement_StartOutput_FullMethodName         = "/service.StreamManagement/StartOutput"
	StreamManagement_StopOutput_FullMethodName          = "/service.StreamManagement/StopOutput"
	StreamManagement_Status_FullMethodName              = "/service.StreamManagement/Status"
)

// StreamManagementClient is the client API for StreamManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamManagementClient interface {
	CreateSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	CurrentSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	UpdateSongPlaylist(ctx context.Context, in *SongPlaylist, opts ...grpc.CallOption) (*Empty, error)
	Preview(ctx context.Context, in *SDP, opts ...grpc.CallOption) (*SDP, error)
	StartStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartAudio(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AudioResponse, error)
	StartOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error)
	StopOutput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type streamManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamManagementClient(cc grpc.ClientConnInterface) StreamManagementClient {
	return &streamManagementClient{cc}
}

func (c *streamManagementClient) CreateSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, StreamManagement_CreateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) CurrentSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, StreamManagement_CurrentSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) UpdateSongPlaylist(ctx context.Context, in *SongPlaylist, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_UpdateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) Preview(ctx context.Context, in *SDP, opts ...grpc.CallOption) (*SDP, error) {
	out := new(SDP)
	err := c.cc.Invoke(ctx, StreamManagement_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) StartStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_StartStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) StopStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_StopStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) StartAudio(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AudioResponse, error) {
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, StreamManagement_StartAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) StartOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, StreamManagement_StartOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) StopOutput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_StopOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, StreamManagement_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamManagementServer is the server API for StreamManagement service.
// All implementations must embed UnimplementedStreamManagementServer
// for forward compatibility
type StreamManagementServer interface {
	CreateSongPlaylist(context.Context, *Empty) (*SongPlaylist, error)
	CurrentSongPlaylist(context.Context, *Empty) (*SongPlaylist, error)
	UpdateSongPlaylist(context.Context, *SongPlaylist) (*Empty, error)
	Preview(context.Context, *SDP) (*SDP, error)
	StartStream(context.Context, *Empty) (*Empty, error)
	StopStream(context.Context, *Empty) (*Empty, error)
	StartAudio(context.Context, *Empty) (*AudioResponse, error)
	StartOutput(context.Context, *OutputRequest) (*OutputResponse, error)
	StopOutput(context.Context, *Empty) (*Empty, error)
	Status(context.Context, *Empty) (*StatusResponse, error)
	mustEmbedUnimplementedStreamManagementServer()
}

// UnimplementedStreamManagementServer must be embedded to have forward compatible implementations.
type UnimplementedStreamManagementServer struct {
}

func (UnimplementedStreamManagementServer) CreateSongPlaylist(context.Context, *Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) CurrentSongPlaylist(context.Context, *Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) UpdateSongPlaylist(context.Context, *SongPlaylist) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) Preview(context.Context, *SDP) (*SDP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedStreamManagementServer) StartStream(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedStreamManagementServer) StopStream(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedStreamManagementServer) StartAudio(context.Context, *Empty) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAudio not implemented")
}
func (UnimplementedStreamManagementServer) StartOutput(context.Context, *OutputRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOutput not implemented")
}
func (UnimplementedStreamManagementServer) StopOutput(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOutput not implemented")
}
func (UnimplementedStreamManagementServer) Status(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedStreamManagementServer) mustEmbedUnimplementedStreamManagementServer() {}

// UnsafeStreamManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamManagementServer will
// result in compilation errors.
type UnsafeStreamManagementServer interface {
	mustEmbedUnimplementedStreamManagementServer()
}

func RegisterStreamManagementServer(s grpc.ServiceRegistrar, srv StreamManagementServer) {
	s.RegisterService(&StreamManagement_ServiceDesc, srv)
}

func _StreamManagement_CreateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).CreateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_CreateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).CreateSongPlaylist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_CurrentSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).CurrentSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_CurrentSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).CurrentSongPlaylist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_UpdateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongPlaylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).UpdateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_UpdateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).UpdateSongPlaylist(ctx, req.(*SongPlaylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).Preview(ctx, req.(*SDP))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StartStream(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StopStream(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_StartAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StartAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StartAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StartAudio(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_StartOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StartOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StartOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StartOutput(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_StopOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StopOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StopOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StopOutput(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamManagement_ServiceDesc is the grpc.ServiceDesc for StreamManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.StreamManagement",
	HandlerType: (*StreamManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSongPlaylist",
			Handler:    _StreamManagement_CreateSongPlaylist_Handler,
		},
		{
			MethodName: "CurrentSongPlaylist",
			Handler:    _StreamManagement_CurrentSongPlaylist_Handler,
		},
		{
			MethodName: "UpdateSongPlaylist",
			Handler:    _StreamManagement_UpdateSongPlaylist_Handler,
		},
		{
			MethodName: "Preview",
			Handler:    _StreamManagement_Preview_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _StreamManagement_StartStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _StreamManagement_StopStream_Handler,
		},
		{
			MethodName: "StartAudio",
			Handler:    _StreamManagement_StartAudio_Handler,
		},
		{
			MethodName: "StartOutput",
			Handler:    _StreamManagement_StartOutput_Handler,
		},
		{
			MethodName: "StopOutput",
			Handler:    _StreamManagement_StopOutput_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _StreamManagement_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/songs.proto",
}
