// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/songs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamManagement_CreateSongPlaylist_FullMethodName = "/service.StreamManagement/CreateSongPlaylist"
	StreamManagement_UpdateSongPlaylst_FullMethodName  = "/service.StreamManagement/UpdateSongPlaylst"
)

// StreamManagementClient is the client API for StreamManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamManagementClient interface {
	CreateSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	UpdateSongPlaylst(ctx context.Context, opts ...grpc.CallOption) (StreamManagement_UpdateSongPlaylstClient, error)
}

type streamManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamManagementClient(cc grpc.ClientConnInterface) StreamManagementClient {
	return &streamManagementClient{cc}
}

func (c *streamManagementClient) CreateSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, StreamManagement_CreateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) UpdateSongPlaylst(ctx context.Context, opts ...grpc.CallOption) (StreamManagement_UpdateSongPlaylstClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[0], StreamManagement_UpdateSongPlaylst_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamManagementUpdateSongPlaylstClient{stream}
	return x, nil
}

type StreamManagement_UpdateSongPlaylstClient interface {
	Send(*UpdateSongPlaylistRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type streamManagementUpdateSongPlaylstClient struct {
	grpc.ClientStream
}

func (x *streamManagementUpdateSongPlaylstClient) Send(m *UpdateSongPlaylistRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamManagementUpdateSongPlaylstClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamManagementServer is the server API for StreamManagement service.
// All implementations must embed UnimplementedStreamManagementServer
// for forward compatibility
type StreamManagementServer interface {
	CreateSongPlaylist(context.Context, *Empty) (*SongPlaylist, error)
	UpdateSongPlaylst(StreamManagement_UpdateSongPlaylstServer) error
	mustEmbedUnimplementedStreamManagementServer()
}

// UnimplementedStreamManagementServer must be embedded to have forward compatible implementations.
type UnimplementedStreamManagementServer struct {
}

func (UnimplementedStreamManagementServer) CreateSongPlaylist(context.Context, *Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) UpdateSongPlaylst(StreamManagement_UpdateSongPlaylstServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSongPlaylst not implemented")
}
func (UnimplementedStreamManagementServer) mustEmbedUnimplementedStreamManagementServer() {}

// UnsafeStreamManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamManagementServer will
// result in compilation errors.
type UnsafeStreamManagementServer interface {
	mustEmbedUnimplementedStreamManagementServer()
}

func RegisterStreamManagementServer(s grpc.ServiceRegistrar, srv StreamManagementServer) {
	s.RegisterService(&StreamManagement_ServiceDesc, srv)
}

func _StreamManagement_CreateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).CreateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_CreateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).CreateSongPlaylist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_UpdateSongPlaylst_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamManagementServer).UpdateSongPlaylst(&streamManagementUpdateSongPlaylstServer{stream})
}

type StreamManagement_UpdateSongPlaylstServer interface {
	SendAndClose(*Empty) error
	Recv() (*UpdateSongPlaylistRequest, error)
	grpc.ServerStream
}

type streamManagementUpdateSongPlaylstServer struct {
	grpc.ServerStream
}

func (x *streamManagementUpdateSongPlaylstServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamManagementUpdateSongPlaylstServer) Recv() (*UpdateSongPlaylistRequest, error) {
	m := new(UpdateSongPlaylistRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamManagement_ServiceDesc is the grpc.ServiceDesc for StreamManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.StreamManagement",
	HandlerType: (*StreamManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSongPlaylist",
			Handler:    _StreamManagement_CreateSongPlaylist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateSongPlaylst",
			Handler:       _StreamManagement_UpdateSongPlaylst_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/songs.proto",
}
