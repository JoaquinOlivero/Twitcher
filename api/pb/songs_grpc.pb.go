// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/songs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamManagement_CreateSongPlaylist_FullMethodName  = "/service.StreamManagement/CreateSongPlaylist"
	StreamManagement_CurrentSongPlaylist_FullMethodName = "/service.StreamManagement/CurrentSongPlaylist"
	StreamManagement_UpdateSongPlaylist_FullMethodName  = "/service.StreamManagement/UpdateSongPlaylist"
	StreamManagement_OutputStatus_FullMethodName        = "/service.StreamManagement/OutputStatus"
	StreamManagement_Preview_FullMethodName             = "/service.StreamManagement/Preview"
	StreamManagement_StartTwitch_FullMethodName         = "/service.StreamManagement/StartTwitch"
	StreamManagement_Audio_FullMethodName               = "/service.StreamManagement/Audio"
	StreamManagement_Output_FullMethodName              = "/service.StreamManagement/Output"
	StreamManagement_StopOutput_FullMethodName          = "/service.StreamManagement/StopOutput"
)

// StreamManagementClient is the client API for StreamManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamManagementClient interface {
	CreateSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	CurrentSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error)
	UpdateSongPlaylist(ctx context.Context, in *SongPlaylist, opts ...grpc.CallOption) (*Empty, error)
	OutputStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OutputResponse, error)
	Preview(ctx context.Context, in *SDP, opts ...grpc.CallOption) (StreamManagement_PreviewClient, error)
	StartTwitch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Audio(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamManagement_AudioClient, error)
	Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamManagement_OutputClient, error)
	StopOutput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type streamManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamManagementClient(cc grpc.ClientConnInterface) StreamManagementClient {
	return &streamManagementClient{cc}
}

func (c *streamManagementClient) CreateSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, StreamManagement_CreateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) CurrentSongPlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongPlaylist, error) {
	out := new(SongPlaylist)
	err := c.cc.Invoke(ctx, StreamManagement_CurrentSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) UpdateSongPlaylist(ctx context.Context, in *SongPlaylist, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_UpdateSongPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) OutputStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OutputResponse, error) {
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, StreamManagement_OutputStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) Preview(ctx context.Context, in *SDP, opts ...grpc.CallOption) (StreamManagement_PreviewClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[0], StreamManagement_Preview_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamManagementPreviewClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamManagement_PreviewClient interface {
	Recv() (*SDP, error)
	grpc.ClientStream
}

type streamManagementPreviewClient struct {
	grpc.ClientStream
}

func (x *streamManagementPreviewClient) Recv() (*SDP, error) {
	m := new(SDP)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamManagementClient) StartTwitch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_StartTwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamManagementClient) Audio(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamManagement_AudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[1], StreamManagement_Audio_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamManagementAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamManagement_AudioClient interface {
	Recv() (*AudioStream, error)
	grpc.ClientStream
}

type streamManagementAudioClient struct {
	grpc.ClientStream
}

func (x *streamManagementAudioClient) Recv() (*AudioStream, error) {
	m := new(AudioStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamManagementClient) Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (StreamManagement_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[2], StreamManagement_Output_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamManagementOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamManagement_OutputClient interface {
	Recv() (*OutputResponse, error)
	grpc.ClientStream
}

type streamManagementOutputClient struct {
	grpc.ClientStream
}

func (x *streamManagementOutputClient) Recv() (*OutputResponse, error) {
	m := new(OutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamManagementClient) StopOutput(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StreamManagement_StopOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamManagementServer is the server API for StreamManagement service.
// All implementations must embed UnimplementedStreamManagementServer
// for forward compatibility
type StreamManagementServer interface {
	CreateSongPlaylist(context.Context, *Empty) (*SongPlaylist, error)
	CurrentSongPlaylist(context.Context, *Empty) (*SongPlaylist, error)
	UpdateSongPlaylist(context.Context, *SongPlaylist) (*Empty, error)
	OutputStatus(context.Context, *Empty) (*OutputResponse, error)
	Preview(*SDP, StreamManagement_PreviewServer) error
	StartTwitch(context.Context, *Empty) (*Empty, error)
	Audio(*Empty, StreamManagement_AudioServer) error
	Output(*Empty, StreamManagement_OutputServer) error
	StopOutput(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedStreamManagementServer()
}

// UnimplementedStreamManagementServer must be embedded to have forward compatible implementations.
type UnimplementedStreamManagementServer struct {
}

func (UnimplementedStreamManagementServer) CreateSongPlaylist(context.Context, *Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) CurrentSongPlaylist(context.Context, *Empty) (*SongPlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) UpdateSongPlaylist(context.Context, *SongPlaylist) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSongPlaylist not implemented")
}
func (UnimplementedStreamManagementServer) OutputStatus(context.Context, *Empty) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputStatus not implemented")
}
func (UnimplementedStreamManagementServer) Preview(*SDP, StreamManagement_PreviewServer) error {
	return status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedStreamManagementServer) StartTwitch(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTwitch not implemented")
}
func (UnimplementedStreamManagementServer) Audio(*Empty, StreamManagement_AudioServer) error {
	return status.Errorf(codes.Unimplemented, "method Audio not implemented")
}
func (UnimplementedStreamManagementServer) Output(*Empty, StreamManagement_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedStreamManagementServer) StopOutput(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOutput not implemented")
}
func (UnimplementedStreamManagementServer) mustEmbedUnimplementedStreamManagementServer() {}

// UnsafeStreamManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamManagementServer will
// result in compilation errors.
type UnsafeStreamManagementServer interface {
	mustEmbedUnimplementedStreamManagementServer()
}

func RegisterStreamManagementServer(s grpc.ServiceRegistrar, srv StreamManagementServer) {
	s.RegisterService(&StreamManagement_ServiceDesc, srv)
}

func _StreamManagement_CreateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).CreateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_CreateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).CreateSongPlaylist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_CurrentSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).CurrentSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_CurrentSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).CurrentSongPlaylist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_UpdateSongPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongPlaylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).UpdateSongPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_UpdateSongPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).UpdateSongPlaylist(ctx, req.(*SongPlaylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_OutputStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).OutputStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_OutputStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).OutputStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_Preview_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SDP)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamManagementServer).Preview(m, &streamManagementPreviewServer{stream})
}

type StreamManagement_PreviewServer interface {
	Send(*SDP) error
	grpc.ServerStream
}

type streamManagementPreviewServer struct {
	grpc.ServerStream
}

func (x *streamManagementPreviewServer) Send(m *SDP) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamManagement_StartTwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StartTwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StartTwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StartTwitch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamManagement_Audio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamManagementServer).Audio(m, &streamManagementAudioServer{stream})
}

type StreamManagement_AudioServer interface {
	Send(*AudioStream) error
	grpc.ServerStream
}

type streamManagementAudioServer struct {
	grpc.ServerStream
}

func (x *streamManagementAudioServer) Send(m *AudioStream) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamManagement_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamManagementServer).Output(m, &streamManagementOutputServer{stream})
}

type StreamManagement_OutputServer interface {
	Send(*OutputResponse) error
	grpc.ServerStream
}

type streamManagementOutputServer struct {
	grpc.ServerStream
}

func (x *streamManagementOutputServer) Send(m *OutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamManagement_StopOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamManagementServer).StopOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamManagement_StopOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamManagementServer).StopOutput(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamManagement_ServiceDesc is the grpc.ServiceDesc for StreamManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.StreamManagement",
	HandlerType: (*StreamManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSongPlaylist",
			Handler:    _StreamManagement_CreateSongPlaylist_Handler,
		},
		{
			MethodName: "CurrentSongPlaylist",
			Handler:    _StreamManagement_CurrentSongPlaylist_Handler,
		},
		{
			MethodName: "UpdateSongPlaylist",
			Handler:    _StreamManagement_UpdateSongPlaylist_Handler,
		},
		{
			MethodName: "OutputStatus",
			Handler:    _StreamManagement_OutputStatus_Handler,
		},
		{
			MethodName: "StartTwitch",
			Handler:    _StreamManagement_StartTwitch_Handler,
		},
		{
			MethodName: "StopOutput",
			Handler:    _StreamManagement_StopOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Preview",
			Handler:       _StreamManagement_Preview_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Audio",
			Handler:       _StreamManagement_Audio_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Output",
			Handler:       _StreamManagement_Output_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/songs.proto",
}
