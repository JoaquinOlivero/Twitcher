// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/songs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SongsManagement_CreatePlaylist_FullMethodName = "/service.SongsManagement/CreatePlaylist"
)

// SongsManagementClient is the client API for SongsManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongsManagementClient interface {
	CreatePlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Playlist, error)
}

type songsManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewSongsManagementClient(cc grpc.ClientConnInterface) SongsManagementClient {
	return &songsManagementClient{cc}
}

func (c *songsManagementClient) CreatePlaylist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, SongsManagement_CreatePlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongsManagementServer is the server API for SongsManagement service.
// All implementations must embed UnimplementedSongsManagementServer
// for forward compatibility
type SongsManagementServer interface {
	CreatePlaylist(context.Context, *Empty) (*Playlist, error)
	mustEmbedUnimplementedSongsManagementServer()
}

// UnimplementedSongsManagementServer must be embedded to have forward compatible implementations.
type UnimplementedSongsManagementServer struct {
}

func (UnimplementedSongsManagementServer) CreatePlaylist(context.Context, *Empty) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedSongsManagementServer) mustEmbedUnimplementedSongsManagementServer() {}

// UnsafeSongsManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongsManagementServer will
// result in compilation errors.
type UnsafeSongsManagementServer interface {
	mustEmbedUnimplementedSongsManagementServer()
}

func RegisterSongsManagementServer(s grpc.ServiceRegistrar, srv SongsManagementServer) {
	s.RegisterService(&SongsManagement_ServiceDesc, srv)
}

func _SongsManagement_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsManagementServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsManagement_CreatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsManagementServer).CreatePlaylist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SongsManagement_ServiceDesc is the grpc.ServiceDesc for SongsManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongsManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.SongsManagement",
	HandlerType: (*SongsManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _SongsManagement_CreatePlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/songs.proto",
}
